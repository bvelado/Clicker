//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        public LogicSystemsComponent logicSystems { get { return (LogicSystemsComponent)GetComponent(CoreComponentIds.LogicSystems); } }

        public bool hasLogicSystems { get { return HasComponent(CoreComponentIds.LogicSystems); } }

        public Entity AddLogicSystems(Entitas.Systems newSystems) {
            var component = CreateComponent<LogicSystemsComponent>(CoreComponentIds.LogicSystems);
            component.systems = newSystems;
            return AddComponent(CoreComponentIds.LogicSystems, component);
        }

        public Entity ReplaceLogicSystems(Entitas.Systems newSystems) {
            var component = CreateComponent<LogicSystemsComponent>(CoreComponentIds.LogicSystems);
            component.systems = newSystems;
            ReplaceComponent(CoreComponentIds.LogicSystems, component);
            return this;
        }

        public Entity RemoveLogicSystems() {
            return RemoveComponent(CoreComponentIds.LogicSystems);
        }
    }

    public partial class Pool {
        public Entity logicSystemsEntity { get { return GetGroup(CoreMatcher.LogicSystems).GetSingleEntity(); } }

        public LogicSystemsComponent logicSystems { get { return logicSystemsEntity.logicSystems; } }

        public bool hasLogicSystems { get { return logicSystemsEntity != null; } }

        public Entity SetLogicSystems(Entitas.Systems newSystems) {
            if (hasLogicSystems) {
                throw new EntitasException("Could not set logicSystems!\n" + this + " already has an entity with LogicSystemsComponent!",
                    "You should check if the pool already has a logicSystemsEntity before setting it or use pool.ReplaceLogicSystems().");
            }
            var entity = CreateEntity();
            entity.AddLogicSystems(newSystems);
            return entity;
        }

        public Entity ReplaceLogicSystems(Entitas.Systems newSystems) {
            var entity = logicSystemsEntity;
            if (entity == null) {
                entity = SetLogicSystems(newSystems);
            } else {
                entity.ReplaceLogicSystems(newSystems);
            }

            return entity;
        }

        public void RemoveLogicSystems() {
            DestroyEntity(logicSystemsEntity);
        }
    }
}

    public partial class CoreMatcher {
        static IMatcher _matcherLogicSystems;

        public static IMatcher LogicSystems {
            get {
                if (_matcherLogicSystems == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.LogicSystems);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherLogicSystems = matcher;
                }

                return _matcherLogicSystems;
            }
        }
    }
